Clientul ii transmite serverului un nume de utilizator, iar serverul ii returneaza informatiile indicate de "finger"
pentru utilizatorul respectiv, respectiv un mesaj de eroare daca numele respectiv nu indica un utilizator recunoscut de sistem.


#include<sys/types.h>
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>

int main(){
int pipe1[2],pipe2[2],pid;
char sir[20];
if(pipe(pipe1)<0){ //descriptorii pipe-ului 1 nu se pot crea
	printf("eroare pipe1\n");
	exit(1);
	}
if(pipe(pipe2)<0){
	printf("eroare la pipe2\n");
	exit(1);
	}
if((pid=fork())<0){
	printf("eroare la fork\n");
	exit(1);
	}
if(pid==0){ //suntem in procesul fiu
	close(pipe1[0]);  //aici e rez codului
	close(pipe2[1]);  //aici e numele fisierului
	read(pipe2[0],sir,20); //citeste din pipe2 numele utilizatorului cautat
	printf("serverul a primit de la client numele utilizatorului: %s \n",sir);
	char *cmd=(char*)malloc(sizeof(char)*500); //pointer la un vector de 30
	strcpy(cmd,"finger ");
	strcat(cmd,sir);
	FILE* f=popen(cmd,"r");
	char rasp1[500];
	//fgets(rasp1,sizeof(rasp1),f);
	int c,i=0;
	do{
		c=fgetc(f);
		//if(c=='\n'){
		//	rasp1[i]=';';
	rasp1[i]=c;
	i++;}
	while(c!=EOF);
	write(pipe1[1],rasp1,sizeof(rasp1));
	pclose(f);
	close(pipe1[1]);
	close(pipe2[0]);
	exit(0);
	}
else{	//suntem in parinte
	close(pipe2[0]); 
	close(pipe1[1]);
	printf("dati un nume de utilizator:");
	scanf("%s",sir);
	write(pipe2[1],sir,strlen(sir)+1);
	char rp[500];
	//int max=strlen(sir)+20;
	read(pipe1[0],rp,sizeof(rp));
	printf("raspunsul primit de la client este: %s \n",rp);
	close(pipe2[1]);
	close(pipe1[0]);
	}
return 0;
}
